
// Code generated by stanc 0016615
#include <stan/model/model_header.hpp>
namespace multiple2_merge_function_normal_p_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 67> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 39, column 3 to column 28)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 40, column 3 to column 46)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 41, column 3 to column 35)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 42, column 3 to column 20)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 43, column 3 to column 20)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 44, column 3 to column 19)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 48, column 3 to column 39)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 52, column 3 to column 39)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 50, column 6 to column 33)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 49, column 25 to line 51, column 4)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 49, column 3 to line 51, column 4)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 54, column 6 to column 50)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 53, column 3 to line 54, column 50)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 59, column 3 to column 26)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 60, column 3 to column 26)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 61, column 3 to column 24)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 63, column 6 to column 35)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 64, column 6 to column 36)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 65, column 6 to column 36)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 67, column 9 to column 41)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 66, column 6 to line 67, column 41)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 69, column 9 to column 47)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 68, column 6 to line 69, column 47)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 71, column 9 to column 50)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 70, column 6 to line 71, column 50)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 62, column 26 to line 72, column 4)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 62, column 3 to line 72, column 4)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 28, column 3 to column 27)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 29, column 27 to column 37)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 29, column 3 to column 39)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 30, column 3 to column 22)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 31, column 18 to column 28)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 31, column 29 to column 34)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 31, column 3 to column 36)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 32, column 18 to column 28)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 32, column 29 to column 34)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 32, column 3 to column 36)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 33, column 3 to column 22)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 34, column 18 to column 28)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 34, column 29 to column 34)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 34, column 3 to column 36)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 35, column 18 to column 28)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 35, column 29 to column 34)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 35, column 3 to column 36)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 39, column 16 to column 26)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 40, column 28 to column 38)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 40, column 39 to column 44)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 41, column 23 to column 33)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 48, column 27 to column 37)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 52, column 27 to column 37)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 4, column 6 to column 43)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 5, column 6 to column 19)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 6, column 6 to column 34)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 3, column 51 to line 7, column 4)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 11, column 6 to column 54)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 10, column 51 to line 12, column 4)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 15, column 6 to column 50)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 14, column 51 to line 16, column 4)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 19, column 6 to column 29)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 20, column 6 to column 19)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 21, column 6 to column 39)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 23, column 20 to column 54)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 23, column 9 to column 54)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 22, column 6 to line 23, column 54)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 24, column 6 to column 18)",
 " (in '/Users/sean00002/Dropbox/PhD/Andrew_Rotation/multiple2_merge_function_normal_p.stan', line 18, column 56 to line 24, column 20)"};


template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
gammaModeSD_lpdf(const T0__& parm, const T1__& m, const T2__& sd,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ r;
    r = DUMMY_VAR__;
    
    current_statement__ = 51;
    r = ((m + stan::math::sqrt((pow(m, 2) + (4 * pow(sd, 2))))) /
          (2 * pow(sd, 2)));
    local_scalar_t__ s;
    s = DUMMY_VAR__;
    
    current_statement__ = 52;
    s = (1 + (m * r));
    current_statement__ = 53;
    return gamma_lpdf<false>(parm, r, s);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct gammaModeSD_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& parm, const T1__& m, const T2__& sd,
           std::ostream* pstream__)  const 
{
return gammaModeSD_lpdf<propto__>(parm, m, sd, pstream__);
}
};

template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
betaModeConc_lpdf(const T0__& parm, const T1__& m, const T2__& c,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 55;
    return beta_lpdf<false>(parm, ((m * (c - 2)) + 1),
             (((1 - m) * (c - 2)) + 1));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct betaModeConc_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& parm, const T1__& m, const T2__& c,
           std::ostream* pstream__)  const 
{
return betaModeConc_lpdf<propto__>(parm, m, c, pstream__);
}
};

template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
betaMeanConc_lpdf(const T0__& parm, const T1__& m, const T2__& c,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 57;
    return beta_lpdf<false>(parm, (m * (c - 2)), ((1 - m) * (c - 2)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct betaMeanConc_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& parm, const T1__& m, const T2__& c,
           std::ostream* pstream__)  const 
{
return betaMeanConc_lpdf<propto__>(parm, m, c, pstream__);
}
};

template <bool propto__, typename T2__>
stan::promote_args_t<stan::value_type_t<T2__>>
dirichMultinom_lpmf(const std::vector<int>& x, const int& K,
                    const T2__& alpha_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T2__>>;
  int current_statement__ = 0; 
  const auto& alpha = to_ref(alpha_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ alpha0;
    alpha0 = DUMMY_VAR__;
    
    current_statement__ = 59;
    alpha0 = sum(alpha);
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 60;
    n = sum(x);
    local_scalar_t__ logP;
    logP = DUMMY_VAR__;
    
    current_statement__ = 61;
    logP = (stan::math::log(n) + lbeta(alpha0, n));
    current_statement__ = 64;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 63;
      if (logical_gt(rvalue(x, "x", index_uni(k)), 0)) {
        current_statement__ = 62;
        logP = (logP -
                 (rvalue(x, "x", index_uni(k)) +
                   lbeta(rvalue(alpha, "alpha", index_uni(k)),
                     rvalue(x, "x", index_uni(k)))));
      } 
    }
    current_statement__ = 65;
    return logP;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct dirichMultinom_lpmf_functor__ {
template <bool propto__, typename T2__>
stan::promote_args_t<stan::value_type_t<T2__>>
operator()(const std::vector<int>& x, const int& K, const T2__& alpha,
           std::ostream* pstream__)  const 
{
return dirichMultinom_lpmf<propto__>(x, K, alpha, pstream__);
}
};

class multiple2_merge_function_normal_p_model final : public model_base_crtp<multiple2_merge_function_normal_p_model> {

 private:
  int N_VARIANTS;
  std::vector<double> v;
  int N_DNA;
  std::vector<std::vector<int>> a;
  std::vector<std::vector<int>> b;
  int N_RNA;
  std::vector<std::vector<int>> k;
  std::vector<std::vector<int>> m; 
  
 
 public:
  ~multiple2_merge_function_normal_p_model() { }
  
  inline std::string model_name() const final { return "multiple2_merge_function_normal_p_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 0016615", "stancflags = "};
  }
  
  
  multiple2_merge_function_normal_p_model(stan::io::var_context& context__,
                                          unsigned int random_seed__ = 0,
                                          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "multiple2_merge_function_normal_p_model_namespace::multiple2_merge_function_normal_p_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 28;
      context__.validate_dims("data initialization","N_VARIANTS","int",
           std::vector<size_t>{});
      N_VARIANTS = std::numeric_limits<int>::min();
      
      current_statement__ = 28;
      N_VARIANTS = context__.vals_i("N_VARIANTS")[(1 - 1)];
      current_statement__ = 28;
      check_greater_or_equal(function__, "N_VARIANTS", N_VARIANTS, 1);
      current_statement__ = 29;
      validate_non_negative_index("v", "N_VARIANTS", N_VARIANTS);
      current_statement__ = 30;
      context__.validate_dims("data initialization","v","double",
           std::vector<size_t>{static_cast<size_t>(N_VARIANTS)});
      v = std::vector<double>(N_VARIANTS, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 30;
      v = context__.vals_r("v");
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 30;
        check_greater_or_equal(function__, "v[sym1__]", v[(sym1__ - 1)], 0);
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 30;
        check_less_or_equal(function__, "v[sym1__]", v[(sym1__ - 1)], 1);
      }
      current_statement__ = 31;
      context__.validate_dims("data initialization","N_DNA","int",
           std::vector<size_t>{});
      N_DNA = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      N_DNA = context__.vals_i("N_DNA")[(1 - 1)];
      current_statement__ = 31;
      check_greater_or_equal(function__, "N_DNA", N_DNA, 1);
      current_statement__ = 32;
      validate_non_negative_index("a", "N_VARIANTS", N_VARIANTS);
      current_statement__ = 33;
      validate_non_negative_index("a", "N_DNA", N_DNA);
      current_statement__ = 34;
      context__.validate_dims("data initialization","a","int",
           std::vector<size_t>{static_cast<size_t>(N_VARIANTS),
            static_cast<size_t>(N_DNA)});
      a = std::vector<std::vector<int>>(N_VARIANTS, std::vector<int>(N_DNA, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> a_flat__;
        current_statement__ = 34;
        a_flat__ = context__.vals_i("a");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= N_DNA; ++sym1__) {
          current_statement__ = 34;
          for (int sym2__ = 1; sym2__ <= N_VARIANTS; ++sym2__) {
            current_statement__ = 34;
            assign(a, a_flat__[(pos__ - 1)],
              "assigning variable a", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 34;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= N_DNA; ++sym2__) {
          current_statement__ = 34;
          check_greater_or_equal(function__, "a[sym1__, sym2__]",
                                 a[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 35;
      validate_non_negative_index("b", "N_VARIANTS", N_VARIANTS);
      current_statement__ = 36;
      validate_non_negative_index("b", "N_DNA", N_DNA);
      current_statement__ = 37;
      context__.validate_dims("data initialization","b","int",
           std::vector<size_t>{static_cast<size_t>(N_VARIANTS),
            static_cast<size_t>(N_DNA)});
      b = std::vector<std::vector<int>>(N_VARIANTS, std::vector<int>(N_DNA, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> b_flat__;
        current_statement__ = 37;
        b_flat__ = context__.vals_i("b");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= N_DNA; ++sym1__) {
          current_statement__ = 37;
          for (int sym2__ = 1; sym2__ <= N_VARIANTS; ++sym2__) {
            current_statement__ = 37;
            assign(b, b_flat__[(pos__ - 1)],
              "assigning variable b", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 37;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 37;
        for (int sym2__ = 1; sym2__ <= N_DNA; ++sym2__) {
          current_statement__ = 37;
          check_greater_or_equal(function__, "b[sym1__, sym2__]",
                                 b[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 38;
      context__.validate_dims("data initialization","N_RNA","int",
           std::vector<size_t>{});
      N_RNA = std::numeric_limits<int>::min();
      
      current_statement__ = 38;
      N_RNA = context__.vals_i("N_RNA")[(1 - 1)];
      current_statement__ = 38;
      check_greater_or_equal(function__, "N_RNA", N_RNA, 1);
      current_statement__ = 39;
      validate_non_negative_index("k", "N_VARIANTS", N_VARIANTS);
      current_statement__ = 40;
      validate_non_negative_index("k", "N_RNA", N_RNA);
      current_statement__ = 41;
      context__.validate_dims("data initialization","k","int",
           std::vector<size_t>{static_cast<size_t>(N_VARIANTS),
            static_cast<size_t>(N_RNA)});
      k = std::vector<std::vector<int>>(N_VARIANTS, std::vector<int>(N_RNA, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> k_flat__;
        current_statement__ = 41;
        k_flat__ = context__.vals_i("k");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= N_RNA; ++sym1__) {
          current_statement__ = 41;
          for (int sym2__ = 1; sym2__ <= N_VARIANTS; ++sym2__) {
            current_statement__ = 41;
            assign(k, k_flat__[(pos__ - 1)],
              "assigning variable k", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 41;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 41;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 41;
        for (int sym2__ = 1; sym2__ <= N_RNA; ++sym2__) {
          current_statement__ = 41;
          check_greater_or_equal(function__, "k[sym1__, sym2__]",
                                 k[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 42;
      validate_non_negative_index("m", "N_VARIANTS", N_VARIANTS);
      current_statement__ = 43;
      validate_non_negative_index("m", "N_RNA", N_RNA);
      current_statement__ = 44;
      context__.validate_dims("data initialization","m","int",
           std::vector<size_t>{static_cast<size_t>(N_VARIANTS),
            static_cast<size_t>(N_RNA)});
      m = std::vector<std::vector<int>>(N_VARIANTS, std::vector<int>(N_RNA, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> m_flat__;
        current_statement__ = 44;
        m_flat__ = context__.vals_i("m");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= N_RNA; ++sym1__) {
          current_statement__ = 44;
          for (int sym2__ = 1; sym2__ <= N_VARIANTS; ++sym2__) {
            current_statement__ = 44;
            assign(m, m_flat__[(pos__ - 1)],
              "assigning variable m", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 44;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 44;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 44;
        for (int sym2__ = 1; sym2__ <= N_RNA; ++sym2__) {
          current_statement__ = 44;
          check_greater_or_equal(function__, "m[sym1__, sym2__]",
                                 m[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 45;
      validate_non_negative_index("p_logit", "N_VARIANTS", N_VARIANTS);
      current_statement__ = 46;
      validate_non_negative_index("qi", "N_VARIANTS", N_VARIANTS);
      current_statement__ = 47;
      validate_non_negative_index("qi", "N_RNA", N_RNA);
      current_statement__ = 48;
      validate_non_negative_index("theta", "N_VARIANTS", N_VARIANTS);
      current_statement__ = 49;
      validate_non_negative_index("p", "N_VARIANTS", N_VARIANTS);
      current_statement__ = 50;
      validate_non_negative_index("q", "N_VARIANTS", N_VARIANTS);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = N_VARIANTS + (N_VARIANTS * N_RNA) + N_VARIANTS + 
      1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "multiple2_merge_function_normal_p_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> p_logit;
      p_logit = std::vector<local_scalar_t__>(N_VARIANTS, DUMMY_VAR__);
      
      current_statement__ = 1;
      p_logit = in__.template read<std::vector<local_scalar_t__>>(N_VARIANTS);
      std::vector<std::vector<local_scalar_t__>> qi;
      qi = std::vector<std::vector<local_scalar_t__>>(N_VARIANTS, std::vector<local_scalar_t__>(N_RNA, DUMMY_VAR__));
      
      
      current_statement__ = 2;
      qi = in__.template read_constrain_lub<std::vector<std::vector<local_scalar_t__>>, jacobian__>(
             0, 1, lp__, N_VARIANTS, N_RNA);
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(N_VARIANTS, DUMMY_VAR__);
      
      current_statement__ = 3;
      theta = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                0, lp__, N_VARIANTS);
      local_scalar_t__ c1;
      c1 = DUMMY_VAR__;
      
      current_statement__ = 4;
      c1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(2,
             lp__);
      local_scalar_t__ c2;
      c2 = DUMMY_VAR__;
      
      current_statement__ = 5;
      c2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(2,
             lp__);
      local_scalar_t__ s;
      s = DUMMY_VAR__;
      
      current_statement__ = 6;
      s = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      std::vector<local_scalar_t__> p;
      p = std::vector<local_scalar_t__>(N_VARIANTS, DUMMY_VAR__);
      
      current_statement__ = 11;
      for (int j = 1; j <= N_VARIANTS; ++j) {
        current_statement__ = 9;
        assign(p, inv_logit(rvalue(p_logit, "p_logit", index_uni(j))),
          "assigning variable p", index_uni(j));
      }
      std::vector<local_scalar_t__> q;
      q = std::vector<local_scalar_t__>(N_VARIANTS, DUMMY_VAR__);
      
      current_statement__ = 13;
      for (int j = 1; j <= N_VARIANTS; ++j) {
        current_statement__ = 12;
        assign(q,
          ((rvalue(theta, "theta", index_uni(j)) *
             rvalue(p, "p", index_uni(j))) /
            ((1.0 - rvalue(p, "p", index_uni(j))) +
              (rvalue(theta, "theta", index_uni(j)) *
                rvalue(p, "p", index_uni(j))))),
          "assigning variable q", index_uni(j));
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 7;
        check_greater_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 0);
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 7;
        check_less_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 1);
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 8;
        check_greater_or_equal(function__, "q[sym1__]", q[(sym1__ - 1)], 0);
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 8;
        check_less_or_equal(function__, "q[sym1__]", q[(sym1__ - 1)], 1);
      }
      {
        current_statement__ = 14;
        lp_accum__.add(gamma_lpdf<propto__>(c1, 1.1, 0.005));
        current_statement__ = 15;
        lp_accum__.add(gamma_lpdf<propto__>(c2, 1.1, 0.005));
        current_statement__ = 16;
        lp_accum__.add(gammaModeSD_lpdf<propto__>(s, 1, 1, pstream__));
        current_statement__ = 27;
        for (int j = 1; j <= N_VARIANTS; ++j) {
          current_statement__ = 17;
          lp_accum__.add(
            betaModeConc_lpdf<propto__>(rvalue(p, "p", index_uni(j)),
              rvalue(v, "v", index_uni(j)), c2, pstream__));
          current_statement__ = 18;
          lp_accum__.add(
            normal_lpdf<propto__>(
              (stan::math::log(rvalue(theta, "theta", index_uni(j))) / s), 0,
              1));
          current_statement__ = 19;
          lp_accum__.add(
            (-stan::math::log(rvalue(theta, "theta", index_uni(j))) -
              stan::math::log(s)));
          current_statement__ = 21;
          for (int i = 1; i <= N_RNA; ++i) {
            current_statement__ = 20;
            lp_accum__.add(
              betaModeConc_lpdf<propto__>(
                rvalue(qi, "qi", index_uni(j), index_uni(i)),
                rvalue(q, "q", index_uni(j)), c1, pstream__));
          }
          current_statement__ = 23;
          for (int i = 1; i <= N_DNA; ++i) {
            current_statement__ = 22;
            lp_accum__.add(
              binomial_lpmf<propto__>(
                rvalue(a, "a", index_uni(j), index_uni(i)),
                (rvalue(a, "a", index_uni(j), index_uni(i)) +
                  rvalue(b, "b", index_uni(j), index_uni(i))),
                rvalue(p, "p", index_uni(j))));
          }
          current_statement__ = 25;
          for (int i = 1; i <= N_RNA; ++i) {
            current_statement__ = 24;
            lp_accum__.add(
              binomial_lpmf<propto__>(
                rvalue(k, "k", index_uni(j), index_uni(i)),
                (rvalue(k, "k", index_uni(j), index_uni(i)) +
                  rvalue(m, "m", index_uni(j), index_uni(i))),
                rvalue(qi, "qi", index_uni(j), index_uni(i))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "multiple2_merge_function_normal_p_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> p_logit;
      p_logit = std::vector<double>(N_VARIANTS, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 1;
      p_logit = in__.template read<std::vector<local_scalar_t__>>(N_VARIANTS);
      std::vector<std::vector<double>> qi;
      qi = std::vector<std::vector<double>>(N_VARIANTS, std::vector<double>(N_RNA, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 2;
      qi = in__.template read_constrain_lub<std::vector<std::vector<local_scalar_t__>>, jacobian__>(
             0, 1, lp__, N_VARIANTS, N_RNA);
      std::vector<double> theta;
      theta = std::vector<double>(N_VARIANTS, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      theta = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                0, lp__, N_VARIANTS);
      double c1;
      c1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      c1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(2,
             lp__);
      double c2;
      c2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      c2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(2,
             lp__);
      double s;
      s = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      s = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      std::vector<double> p;
      p = std::vector<double>(N_VARIANTS, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> q;
      q = std::vector<double>(N_VARIANTS, std::numeric_limits<double>::quiet_NaN());
      
      
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        vars__.emplace_back(p_logit[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N_RNA; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_VARIANTS; ++sym2__) {
          vars__.emplace_back(qi[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);
      }
      vars__.emplace_back(c1);
      vars__.emplace_back(c2);
      vars__.emplace_back(s);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      for (int j = 1; j <= N_VARIANTS; ++j) {
        current_statement__ = 9;
        assign(p, inv_logit(rvalue(p_logit, "p_logit", index_uni(j))),
          "assigning variable p", index_uni(j));
      }
      current_statement__ = 13;
      for (int j = 1; j <= N_VARIANTS; ++j) {
        current_statement__ = 12;
        assign(q,
          ((rvalue(theta, "theta", index_uni(j)) *
             rvalue(p, "p", index_uni(j))) /
            ((1.0 - rvalue(p, "p", index_uni(j))) +
              (rvalue(theta, "theta", index_uni(j)) *
                rvalue(p, "p", index_uni(j))))),
          "assigning variable q", index_uni(j));
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 7;
        check_greater_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 0);
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 7;
        check_less_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 1);
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 8;
        check_greater_or_equal(function__, "q[sym1__]", q[(sym1__ - 1)], 0);
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 8;
        check_less_or_equal(function__, "q[sym1__]", q[(sym1__ - 1)], 1);
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
          vars__.emplace_back(p[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
          vars__.emplace_back(q[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> p_logit;
      p_logit = std::vector<double>(N_VARIANTS, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 1;
      p_logit = context__.vals_r("p_logit");
      std::vector<std::vector<double>> qi;
      qi = std::vector<std::vector<double>>(N_VARIANTS, std::vector<double>(N_RNA, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> qi_flat__;
        current_statement__ = 2;
        qi_flat__ = context__.vals_r("qi");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_RNA; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= N_VARIANTS; ++sym2__) {
            current_statement__ = 2;
            assign(qi, qi_flat__[(pos__ - 1)],
              "assigning variable qi", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<std::vector<double>> qi_free__;
      qi_free__ = std::vector<std::vector<double>>(N_VARIANTS, std::vector<double>(N_RNA, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= N_RNA; ++sym2__) {
          current_statement__ = 2;
          assign(qi_free__,
            stan::math::lub_free(qi[(sym1__ - 1)][(sym2__ - 1)], 0, 1),
            "assigning variable qi_free__", index_uni(sym1__),
                                              index_uni(sym2__));
        }
      }
      std::vector<double> theta;
      theta = std::vector<double>(N_VARIANTS, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      theta = context__.vals_r("theta");
      std::vector<double> theta_free__;
      theta_free__ = std::vector<double>(N_VARIANTS, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        current_statement__ = 3;
        assign(theta_free__, stan::math::lb_free(theta[(sym1__ - 1)], 0),
          "assigning variable theta_free__", index_uni(sym1__));
      }
      double c1;
      c1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      c1 = context__.vals_r("c1")[(1 - 1)];
      double c1_free__;
      c1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      c1_free__ = stan::math::lb_free(c1, 2);
      double c2;
      c2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      c2 = context__.vals_r("c2")[(1 - 1)];
      double c2_free__;
      c2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      c2_free__ = stan::math::lb_free(c2, 2);
      double s;
      s = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      s = context__.vals_r("s")[(1 - 1)];
      double s_free__;
      s_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      s_free__ = stan::math::lb_free(s, 0);
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        vars__.emplace_back(p_logit[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_RNA; ++sym2__) {
          vars__.emplace_back(qi_free__[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        vars__.emplace_back(theta_free__[(sym1__ - 1)]);
      }
      vars__.emplace_back(c1_free__);
      vars__.emplace_back(c2_free__);
      vars__.emplace_back(s_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"p_logit", "qi", "theta", "c1", "c2",
      "s", "p", "q"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N_VARIANTS)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N_VARIANTS),
                          static_cast<size_t>(N_RNA)},
      std::vector<size_t>{static_cast<size_t>(N_VARIANTS)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N_VARIANTS)},
      std::vector<size_t>{static_cast<size_t>(N_VARIANTS)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_logit" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_RNA; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_VARIANTS; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "qi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "c1");
    param_names__.emplace_back(std::string() + "c2");
    param_names__.emplace_back(std::string() + "s");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "q" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_logit" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_RNA; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_VARIANTS; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "qi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "c1");
    param_names__.emplace_back(std::string() + "c2");
    param_names__.emplace_back(std::string() + "s");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_VARIANTS; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "q" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_logit\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_VARIANTS) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"qi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_VARIANTS) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_RNA) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_VARIANTS) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_VARIANTS) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_VARIANTS) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_logit\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_VARIANTS) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"qi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_VARIANTS) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_RNA) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_VARIANTS) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_VARIANTS) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_VARIANTS) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = multiple2_merge_function_normal_p_model_namespace::multiple2_merge_function_normal_p_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return multiple2_merge_function_normal_p_model_namespace::profiles__;
}

#endif


